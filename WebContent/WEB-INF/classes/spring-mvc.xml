<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p" 
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xmlns:task="http://www.springframework.org/schema/task" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans    
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd    
                        http://www.springframework.org/schema/context    
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd 
                        http://www.springframework.org/schema/task
						http://www.springframework.org/schema/task/spring-task-3.2.xsd   
                        http://www.springframework.org/schema/mvc    
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">
	<!-- 开启注解 -->
	<mvc:annotation-driven />
	<!-- 设置定时任务 -->
 	<task:annotation-driven/> 
	
	<!-- 拦截器已采用url过滤.do模式只拦截controller，此处无效？ -->
	<!-- 装配拦截器  实现aop 事务 日志 权限 -->  
    <mvc:interceptors>  
  		<!-- 日志拦截访问url 外层bean拦截所有 --> 
     	<bean class="com.event.intercept.LogInterceptors" />   
     	<!-- 登录拦截例外跳转 -->
    	<mvc:interceptor> 
 	 	   <mvc:mapping path="/*/**" />    
	 	   <!-- 资源拦截例外 -->
           <!--  <mvc:exclude-mapping path="/**/*.css"/> -->
           <mvc:exclude-mapping path="/include/**"/> 
           
   	 	   <mvc:exclude-mapping path="/*/**.ajax" />
           <!-- 登录拦截例外 -->
	 	   <mvc:exclude-mapping path="/*/*onlogin.do" />
	 	   <mvc:exclude-mapping path="/*/*loginin.do" />
	       <bean class="com.event.intercept.LoginInterceptors" />  
      	</mvc:interceptor>
    </mvc:interceptors>   
	
	<!-- 资源访问 不拦截目录，也没有经过上面的拦截器 -->
	<mvc:resources location="/include/"	mapping="/include/**" /> 
	<mvc:resources location="/jsp/" 	mapping="/jsp/**"/>		<!-- 直接访问jsp目录下 -->
	<mvc:resources location="/test/"	mapping="/test/**"/> 	<!--  直接访问test目录下 -->
	<!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->
	<context:component-scan base-package="com.controller,com.event" />

	<!-- 启动SpringMVC的注解功能，完成请求和注解P 的映射 --> 
	<!-- 代替注解映射器和注解适配器配置 mvc:annotation-driven默认加载很多的参数绑定方法， 比如json转换解析器就默认加载 -->
	<mvc:annotation-driven></mvc:annotation-driven>

	<!-- 视图解析器配置 跳转文件的前后缀 ，视图模式配置 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
		<property name="prefix" value="/jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>


	
 
	<!-- 文件上传配置 如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="utf-8" />	<!-- 默认编码 -->
		<property name="maxUploadSize" value="655360000" />	<!-- 文件大小最大值 -->
		<property name="maxInMemorySize" value="65536" />		<!-- 内存中的最大值 -->
	</bean>
 


</beans>  